AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  McAfee-ePO Base stack which creates shared infrastructure.
Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: McAfee ePolicy Orchestrator Platform Configuration
        Parameters:
          - Environment
          - DomainName
          - HostedZoneID
          - SubDomainName
      - Label:
          default: Peer-Parent Stack Configuration
        Parameters:
          - ParentStack
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - BastionSecurityGroupID
      - Label:
          default: Databse-VPC Peering Configuration
        Parameters:
          - DBInstanceIdentifier
      - Label:
          default: Administration Configuration
        Parameters:
          - AdminEmailAddress
          - AutoCleanup
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
        - QSS3BucketName
        - QSS3BucketRegion
        - QSS3KeyPrefix
    ParameterLabels:
      Environment:
        default: Deployment Environment
      DomainName:
        default: Domain Name
      HostedZoneID:
        default: Domain Public Hosted Zone ID
      SubDomainName:
        default: Sub Domain Name
      ParentStack:
        default: Parent Stack
      VPCID:
        default: VPC ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      DBInstanceIdentifier:
        default: DB Instance Identifier
      AdminEmailAddress:
        default: Operator Email
      AutoCleanup:
        default: Auto Cleanup
      QSS3BucketName:
        default: S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: S3 Key Prefix
Parameters:
  Environment:
    AllowedValues:
      - 'Production'
      - 'Development'
    Default: 'Production'
    Description: What is the targeted deployment environment?
    Type: String
  DomainName:
    Description: >-
      [Optional] AWS Route 53 registered domain name (e.g. mcafee.com).
      We recommend either to register AWS Route 53 domain name so that public DNS records can be propagated automatically
      OR add the sub domain Name Server(NS) records into your main domain server.
    Default: ''
    Type: String
  HostedZoneID:
    Description: Domain name hosted zone ID (public) for the passed domain name.
    Default: ''
    Type: String
  SubDomainName:
    Description: >-
      The non-existant sub domain name to be used for managment solution. (e.g. manage.mcafee.com ). We recommend either to register AWS Route 53
      domain name so that public DNS records can be propagated automatically OR add the sub domain Name Server(NS) records into your main domain server.
    Default: ''
    MaxLength: 256
    Type: String
  ParentStack:
    Description: Parent stack name by which Base stack is deriving if any.
    MinLength: 1
    MaxLength: 256
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment(e.g., vpc-fd990584)
    Type: AWS::EC2::VPC::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)
    Default: ''
    Type: String
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)
    Default: ''
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the McAfee application components (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the McAfee application components (e.g., subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)
    Default: ''
    Type: String
  DBInstanceIdentifier:
    Default: ''
    MaxLength: 512
    Description: Specify your existing database instance identifier. Leave it blank to create new database instance.
    Type: String
  AdminEmailAddress:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,8}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: Email address that notifications of any operations will be sent. In addition this will be used for tagging of ownership of resources.
    Type: String
  AutoCleanup:
    AllowedValues:
      - Enable
      - Disable
    Default: Enable
    Description: Auto cleanup of backup logs and data in S3.
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-).
      It cannot start or end with a hyphen (-) or period (.).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-).
      It cannot start or end with a hyphen (-) or period (.).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
      Prefix cannot start with a slash but must end with a slash unless it is the empty string.'
    Default: quickstart-mcafee-epo/
    Description: >-
      The S3 key name prefix used to simulate a folder for your copy of Quick Start assets,
      if you decide to customize or extend the Quick Start for your own use.This prefix can include numbers,
      lowercase letters, uppercase letters, hyphens, and forward slashes.'
    Type: String

Rules:
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC

Mappings:
  AWSELBAccountID:
    us-east-1:
      ID: '127311923021'
    us-east-2:
      ID: '033677994240'
    us-west-1:
      ID: '027434742980'
    us-west-2:
      ID: '797873946194'
    ca-central-1:
      ID: '985666609251'
    eu-central-1:
      ID: '054676820928'
    eu-west-1:
      ID: '156460612806'
    eu-west-2:
      ID: '652711504416'
    eu-west-3:
      ID: '009996457667'
    ap-northeast-1:
      ID: '582318560864'
    ap-northeast-2:
      ID: '600734575887'
    ap-northeast-3:
      ID: '383597477331'
    ap-southeast-1:
      ID: '114774131450'
    ap-southeast-2:
      ID: '783225319266'
    ap-south-1:
      ID: '718504428378'
    sa-east-1:
      ID: '507241528517'
    us-gov-west-1:
      ID: '048591011584'
    us-gov-east-1:
      ID: '190560391635'
    cn-north-1:
      ID: '638102146993'
    cn-northwest-1:
      ID: '037604701340'

Conditions:
  cEnableCleanup: !Equals [!Ref AutoCleanup, 'Enable']
  cCreateVPCPeering: !Not [ !Equals [ !Ref DBInstanceIdentifier, '' ] ]
  cGovCloudCondition: !Or
    - !Equals [ !Ref 'AWS::Region', us-gov-west-1 ]
    - !Equals [ !Ref 'AWS::Region', us-gov-east-1 ]
  cPublicNetwork: !And
    - !Not [ !Equals [ !Ref PublicSubnet1ID, '' ] ]
    - !Not [ !Equals [ !Ref PublicSubnet2ID, '' ] ]
  cPrivateNetwork: !Not [ !Condition cPublicNetwork ]
  cCreateR53Resources: !And
    - !Not [ !Condition cGovCloudCondition ]
    - !Not [ !Condition cPrivateNetwork ]
  cExistingDomain: !And
    - !Condition cCreateR53Resources
    - !Not [ !Equals [ !Ref DomainName, '' ] ]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:
  ##############################################################################
  # Source copying as per region
  ##############################################################################
  # Amazon S3 bucket for regional source store
  SourceStore:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SourceStore
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Source copying lambda role
  CopySourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CopySourceLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                  - s3:Delete*
                Resource:
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref SourceStore
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref SourceStore
                      - '/*'

  # Source copying lambda
  CopySourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt  CopySourceLambdaRole.Arn
      MemorySize: 128
      Runtime: python3.6
      Timeout: 300
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python3
          import json
          import boto3
          import cfnresponse

          import os
          import tempfile
          import zipfile

          from concurrent import futures
          from io import BytesIO

          s3 = boto3.client('s3')
          s3_resource = boto3.resource('s3')

          def extract(bucket, prefix, filename):
              exract_status = 'success'
              try:
                  s3.upload_fileobj(BytesIO(zipdata.read(filename)), bucket, prefix + filename)
              except Exception as e:
                  print('failed to extract file:%s, %s' % (prefix + filename, str(e)))
                  exract_status = 'fail'
              finally:
                  return prefix+filename, exract_status

          def extract_zip(bucket, prefix, artifacts_zip_key):
              global zipdata
              temp_file = tempfile.mktemp()
              s3.download_file(bucket, prefix + artifacts_zip_key, temp_file)
              zipdata = zipfile.ZipFile(temp_file)

              with futures.ThreadPoolExecutor(max_workers=4) as executor:
                  future_list = [
                      executor.submit(extract, bucket, prefix, filename)
                      for filename in zipdata.namelist()
                  ]

              result = {'success': [], 'fail': []}
              for future in future_list:
                  filename, status = future.result()
                  result[status].append(filename)

              if 0 == len(result['fail']):
                  print('sucessfully extracted artifacts into bucket %s' % (bucket))
                  return True
              else:
                  print(result)
                  return False

          def copy_source(source_bucket, dest_bucket, prefix, artifacts_zip_key):
              key = prefix + artifacts_zip_key
              copy_source = {
                  'Bucket': source_bucket,
                  'Key': key
              }
              print('copy_source: %s' % copy_source)
              print('dest_bucket = %s'% dest_bucket)
              print('key = %s' % key)
              response = s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
              print(response)
              if 'VersionId' in response:
                  print('successfully downloaded mcafee artifacts zip from bucket %s' % (source_bucket))
                  return extract_zip(dest_bucket, prefix, artifacts_zip_key)
              else:
                  print('artifacts zip is not copied into regional S3 bucket')
                  return False

          def delete_objects(bucket_name):
              print('deleting data from bucket %s' % bucket_name)
              bucket = s3_resource.Bucket(bucket_name)
              print('deleting data from bucket %s' % bucket_name)
              bucket.objects.all().delete()
              print('deleting all versions of bucket %s' % bucket_name)
              bucket.object_versions.all().delete()

          def handler(event, context):
              print('Received event: %s' % json.dumps(event))
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  artifacts_zip_key = event['ResourceProperties']['ArtifactsZIPKey']
                  prefix = event['ResourceProperties']['Prefix']

                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
                  else:
                      print('sync-up with quick start bucket due version mismatch')
                      if True == copy_source(source_bucket, dest_bucket, prefix, artifacts_zip_key):
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

              except Exception as e:
                  print('Exception in handling the request, %s' % (str(e)))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-CopySourceLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Source copying lambda version
  CopySourceLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref CopySourceLambda

  # Source copying lambda log group name
  CopySourceLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: CopySourceLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref CopySourceLambda
      RetentionInDays: 7

  # copy source custom action, which copies the source into regional bucket
  CopySourceAction:
    Type: Custom::CopySourceAction
    DependsOn: CopySourceLambdaLogGroup
    Properties:
      ServiceToken:  !GetAtt CopySourceLambda.Arn
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      DestBucket: !Ref SourceStore
      Prefix: !Sub ${QSS3KeyPrefix}
      ArtifactsZIPKey: assets/pipeline/artifacts/mcafee-artifacts.zip

  ##############################################################################
  # Pre deployment lambda roles, function which setups the parameter store
  # and verify email address
  ##############################################################################
  # pre deploy lambda role to setup parameter store
  PreDeployLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PreDeployLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource:
                  !Sub
                  - arn:${Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                  - Partition:
                      !If [ cGovCloudCondition, aws-us-gov, aws ]
              - Effect: Allow
                Action:
                  - kms:Encrypt
                Resource:
                  !Sub
                  - arn:${Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
                  - Partition:
                      !If [ cGovCloudCondition, aws-us-gov, aws ]
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  !Sub
                  - arn:${Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ParentStack}*
                  - Partition:
                      !If [ cGovCloudCondition, aws-us-gov, aws ]
              - Effect: Allow
                Action:
                  - ses:VerifyEmailIdentity
                Resource: '*'

  # pre deploy lambda  setups the ssm parameter store, verifies the email address
  PreDeployLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/pre-deploy.zip
      Description: Lambda function to set up pre deployment actions.
      Handler: pre-deploy.handler
      Role: !GetAtt PreDeployLambdaRole.Arn
      Runtime: python3.6
      Timeout: 120
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PreDeployLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # pre deploy lambda  version
  PreDeployLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref PreDeployLambda

  # pre deploy lambda log group
  PreDeployLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreDeployLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref PreDeployLambda
      RetentionInDays: 7

  ##############################################################################
  # S3 bucket for holding logs and configuration
  ##############################################################################
  # data store S3 bucket to take backup of logs and config
  DataStore:
    Type: AWS::S3::Bucket
    DependsOn: ELBLogsLambdaPermission
    DeletionPolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt ELBLogsLambda.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: 'prefix'
                    Value: 'logs/elb'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Id: !Sub ${ParentStack}-DataStore-lifecycle-rule
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
              - StorageClass: GLACIER
                TransitionInDays: 60
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataStore
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # data store S3 bucket policy to take backup of logs and config
  DataStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataStore
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Resource: !Join
              - ''
              - - !Sub
                  - 'arn:${Partition}:s3:::'
                  - Partition:
                      !If [ cGovCloudCondition, aws-us-gov, aws ]
                - !Ref DataStore
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join
                - ''
                - - !Sub
                    - 'arn:${Partition}:s3:::'
                    - Partition:
                        !If [ cGovCloudCondition, aws-us-gov, aws ]
                  - !Ref DataStore
                  - '/*'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
              AWS: !FindInMap [AWSELBAccountID, !Ref 'AWS::Region', ID]

  ##############################################################################
  # Log groups
  ##############################################################################
  # VPC flow logs log group
  VpcLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:  !Sub /mcafee/${ParentStack}-vpcflowlog
      RetentionInDays: 7

  # ELB log groups
  ELBLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:  !Sub /mcafee/${ParentStack}-elb
      RetentionInDays: 7

  # ePO loggroup
  ePOLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /mcafee/${ParentStack}-epo
      RetentionInDays: 7

  # AH loggroup
  AHLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /mcafee/${ParentStack}-ah
      RetentionInDays: 7

  # DXL loggroup
  DXLLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /mcafee/${ParentStack}-dxl
      RetentionInDays: 7

  ##############################################################################
  # Auto back up of logs into s3
  ##############################################################################
  # data backup lambda IAM role
  DataBackupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: DataBackupLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateExportTask
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref DataStore
                      - '/*'

  # data backup event rule
  DataBackupEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to trigger data backup
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataBackupLambda.Arn
          Id: !Sub ${ParentStack}-epo
          Input: !Sub >
            {
              "Type": "epo",
              "LogGroupName": "/mcafee/${ParentStack}-epo"
            }
        - Arn: !GetAtt DataBackupLambda.Arn
          Id: !Sub ${ParentStack}-ah
          Input: !Sub >
            {
              "Type": "ah",
              "LogGroupName": "/mcafee/${ParentStack}-ah"
            }
        - Arn: !GetAtt DataBackupLambda.Arn
          Id: !Sub ${ParentStack}-dxl
          Input: !Sub >
            {
              "Type": "dxl",
              "LogGroupName": "/mcafee/${ParentStack}-dxl"
            }
        - Arn: !GetAtt DataBackupLambda.Arn
          Id: !Sub ${ParentStack}-vpcflowlog
          Input: !Sub >
            {
              "Type": "vpcflowlog",
              "LogGroupName": "/mcafee/${ParentStack}-vpcflowlog"
            }

  # Data backup lambda log group name
  DataBackupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DataBackupLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref DataBackupLambda
      RetentionInDays: 7

  # data backup lambda
  DataBackupLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/data-backup.zip
      Description: Lambda function to take the backup of data periodically.
      Handler: data-backup.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          DATA_BACKUP_DESTINATION: !Ref DataStore
      Role: !GetAtt DataBackupLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataBackupLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # data backup lambda version
  DataBackupLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DataBackupLambda

  # data event rule permission to invoke lambda
  DataBackupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataBackupLambda
      Action: lambda:InvokeFunction
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt DataBackupEventRule.Arn

  ##############################################################################
  # Auto clean up of logs
  ##############################################################################
  # auto cleanup lambda role
  AutoCleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AutoCleanupLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Delete*
                  - s3:List*
                Resource:
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref DataStore
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref DataStore
                      - '/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # auto cleanup lambda
  AutoCleanupLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub  ${QSS3KeyPrefix}functions/packages/infrastructure/cleanup.zip
      Description: Lambda function to cleanup backup data and logs.
      Handler: cleanup.handler
      Role: !GetAtt AutoCleanupLambdaRole.Arn
      Runtime: python3.6
      Timeout: 180
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AutoCleanupLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # auto cleanup lambda version
  AutoCleanupLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref AutoCleanupLambda

  # Auto cleanup lambda log group name
  AutoCleanupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: AutoCleanupLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref AutoCleanupLambda
      RetentionInDays: 7

  # auto cleanup custom action
  AutoCleanupAction:
    Type: Custom::AutoCleanupAction
    DependsOn: AutoCleanupLambdaLogGroup
    Properties:
      ServiceToken:  !GetAtt AutoCleanupLambda.Arn
      DeleteBucket: 'yes'
      BucketNames:
        - !If
          - cEnableCleanup
          - !Ref DataStore
          - !Ref 'AWS::NoValue'

  ##############################################################################
  # VPC Flow logs
  ##############################################################################
  VpcFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: VpcFlowLogRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

  # enable vpc flow logs if advance logging is enabled
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    DependsOn: VpcLogGroup
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogRole.Arn
      LogGroupName: !Ref VpcLogGroup
      ResourceId: !Ref VPCID
      ResourceType: VPC
      TrafficType: REJECT

  ##############################################################################
  # ELB Logging
  ##############################################################################
  ELBLogsLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Allows Lambda to read from S3 and write to CloudWatch.
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ELBLogsLambdaRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: '*'

  # ELB logs lambda log group name
  ELBLogsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: ELBLogsLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref ELBLogsLambda
      RetentionInDays: 7

  # elb logs upload lambda verison
  ELBLogsLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/elb-logs.zip
      Description: Lambda function to move elb logs from Amazon S3 to Amazon cloud watch.
      Handler: elb-logs.handler
      Environment:
        Variables:
          LOG_GROUP: !Ref ELBLogGroup
      Role: !GetAtt ELBLogsLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ELBLogsLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # elb logs upload lambda verison
  ELBLogsLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ELBLogsLambda

  # ELB logs lambda permission
  ELBLogsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ELBLogsLambda
      Action: lambda:InvokeFunction
      Principal: !Sub s3.${AWS::URLSuffix}
      SourceAccount: !Ref AWS::AccountId

  ##############################################################################
  # Networking RDP Admin security group used by ePO/AH/DXL instance security
  # group
  ##############################################################################
  # RDP Admin Security group at VPC level which can be used by private instances
  RDPAdminSecurityGroup:
    Condition: cPublicNetwork
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up Device Management Application ports for private instances
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 593
          ToPort: 593
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 139
          ToPort: 139
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: udp
          FromPort: 137
          ToPort: 137
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDPAdminSecurityGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcId: !Ref VPCID

  ##############################################################################
  # Networking get current vpc details like route table, VPC , subnets CIDR for
  # making security group more tight for instances
  # Also gets the DB VPC details in case we need to do vpc peering with existing
  # database
  ##############################################################################
  # get vpc details lamda role for current stack and db vpc if required
  GetVpcDetailsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: GetVpcDetailsLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSubnets
                  - rds:DescribeDBInstances
                Resource: '*'

  # Lambda to get VPC details and additonally db vpc details if required
  GetVpcDetailsLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key:  !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/get-vpc-details.zip
      Description: Lambda function to get VPC details and DB VPC details if required.
      Handler: get-vpc-details.handler
      Role: !GetAtt GetVpcDetailsLambdaRole.Arn
      Runtime: python3.6
      Timeout: 180
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-get-vpc-details-lambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Get VPC details lambda log group name
  GetVpcDetailsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetVpcDetailsLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref GetVpcDetailsLambda
      RetentionInDays: 7

  # Get VPC details lambda version
  GetVpcDetailsLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GetVpcDetailsLambda

  # Custom resource for getting VPC details and additonally DB VPC if required
  GetVpcDetailsCustom:
    Type: Custom::CFNGetVpcDetails
    DependsOn: GetVpcDetailsLambdaLogGroup
    Properties:
      ServiceToken:  !GetAtt GetVpcDetailsLambda.Arn
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCID: !Ref VPCID
      PrivateSubnet1ID: !Ref PrivateSubnet1ID
      PrivateSubnet2ID: !Ref PrivateSubnet2ID
      PublicSubnet1ID: !Ref PublicSubnet1ID
      PublicSubnet2ID: !Ref PublicSubnet2ID

  # DB VPC peering for the case of using existing DB instance
  DBVPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: cCreateVPCPeering
    Properties:
      PeerVpcId: !GetAtt [ GetVpcDetailsCustom, DBVPCID ]
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub DBVPCPeering
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Routes between our vpc and DB vpc (PeeringRouteVpcPrivate1ToDBVpc, PeeringRouteVpcPrivate2ToDBVpc, PeeringRouteDBVpcToVpc)
  PeeringRouteVpcPrivate1ToDBVpc:
    Type: AWS::EC2::Route
    Condition: cCreateVPCPeering
    DependsOn: [DBVPCPeering]
    Properties:
      DestinationCidrBlock: !GetAtt [ GetVpcDetailsCustom, DBVPCCIDR ]
      RouteTableId: !GetAtt [ GetVpcDetailsCustom, PrivateRouteTable1ID ]
      VpcPeeringConnectionId: !Ref DBVPCPeering

  PeeringRouteVpcPrivate2ToDBVpc:
    Type: AWS::EC2::Route
    Condition: cCreateVPCPeering
    DependsOn: [DBVPCPeering]
    Properties:
      DestinationCidrBlock: !GetAtt [ GetVpcDetailsCustom, DBVPCCIDR ]
      RouteTableId: !GetAtt [ GetVpcDetailsCustom, PrivateRouteTable2ID ]
      VpcPeeringConnectionId: !Ref DBVPCPeering

  PeeringRouteDBVpcToVpc:
    Type: AWS::EC2::Route
    Condition: cCreateVPCPeering
    DependsOn: [DBVPCPeering]
    Properties:
      DestinationCidrBlock: !GetAtt [ GetVpcDetailsCustom, VPCCIDR ]
      RouteTableId: !GetAtt [ GetVpcDetailsCustom, DBVPCRouteTableID ]
      VpcPeeringConnectionId: !Ref DBVPCPeering


  ##############################################################################
  # AWS Route 53 private and public hosted zone setup for the solution
  ##############################################################################
  # Public Hostedzone for external ePO URLs
  R53PublicHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: cCreateR53Resources
    Properties:
      HostedZoneConfig:
        Comment: 'Managed by McAfee Enterprise Security Management'
      Name: !Sub ${SubDomainName}
      HostedZoneTags:
        - Key: Name
          Value: !Sub R53PublicHostedZone
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # sub domain name servers record set in base domain
  NSR53PublicRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: cExistingDomain
    DependsOn: R53PublicHostedZone
    Properties:
      HostedZoneId: !Sub ${HostedZoneID}
      Comment: 'Sub Domain NS RecordSet'
      Name:  !Sub ${SubDomainName}
      Type: NS
      TTL: '900'
      ResourceRecords: !GetAtt R53PublicHostedZone.NameServers

  ##############################################################################
  # Clean Resources which are attached to Lambda like ENI, etc.
  # This lambda will get ENIs for the given SecurityGroup and look for ENIs which are associated with Lambdas.
  # Then detach ENI from SG and delete.
  ##############################################################################

  # Lambda role for deleting resources associated with lambda
  DeleteResourcesAssociatedWithLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: DeleteResourcesAssociatedWithLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  # Lambda to delete resources associated with lambda
  DeleteResourcesAssociatedWithLambda:
    Type: AWS::Lambda::Function
    DependsOn: [CopySourceAction, PostDeployLambda]
    Properties:
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/delete-resources-associated-with-lambda.zip
      Description: Lambda function to delete resources associated with lambda.
      Handler: delete-resources-associated-with-lambda.handler
      Role: !GetAtt DeleteResourcesAssociatedWithLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DeleteResourcesAssociatedWithLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Lambda version to delete resources associated with lambda
  DeleteResourcesAssociatedWithLambdaV1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DeleteResourcesAssociatedWithLambda

  # Log group for delete resources associated with lambda lambda
  DeleteResourcesAssociatedWithLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteResourcesAssociatedWithLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref DeleteResourcesAssociatedWithLambda
      RetentionInDays: 7

  # Custom action to invoke the delete resources associated with lambda, for now its just ENI associated with security group
  DeleteResourcesAssociatedWithLambdaCustomAction:
    Type: Custom::DeleteResourcesAssociatedWithLambdaCustomAction
    DependsOn: [ DeleteResourcesAssociatedWithLambdaLogGroup ]
    Properties:
      ServiceToken:  !GetAtt DeleteResourcesAssociatedWithLambda.Arn
      SecurityGroup: !Ref PostDeployLambdaSecurityGroup


  ##############################################################################
  # Post deployment lambdar role, function which setups up the resource groups
  # and sends an email to the admin about the deployment.
  ##############################################################################
  # Post deploy lambda role
  PostDeployLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PostDeployLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              # TBD - adding these in Gov cloud as well and it will show warning in IAM policies.
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref SourceStore
                  - !Join
                    - ''
                    - - !Sub
                        - 'arn:${Partition}:s3:::'
                        - Partition:
                            !If [ cGovCloudCondition, aws-us-gov, aws ]
                      - !Ref SourceStore
                      - '/*'
              - Effect: Allow
                Action:
                  - resource-groups:UpdateGroup
                  - resource-groups:DeleteGroup
                  - resource-groups:CreateGroup
                  - resource-groups:GetGroup
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  !Sub
                  - arn:${Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                  - Partition:
                      !If [ cGovCloudCondition, aws-us-gov, aws ]
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  # Post deploy lambda
  PostDeployLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PostDeployLambda.
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PostDeployLambdaSecurityGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: PostDeployLambda
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcId: !Ref VPCID

  PostDeployLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopySourceAction
    Properties:
      VpcConfig:
        SecurityGroupIds:
          - !Ref PostDeployLambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
      Code:
        S3Bucket: !Ref SourceStore
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/infrastructure/post-deploy.zip
      Description: Lambda function to finish up post deployment tasks.'
      Handler: post-deploy.handler
      Role: !GetAtt PostDeployLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PostDeployLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-Base
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}

  # Post deploylambda version
  PostDeployLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref PostDeployLambda

  # pre deploy lambda log group
  PostDeployLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostDeployLambda
    Properties:
      LogGroupName: !Join
            - ''
            - - '/aws/lambda/'
              - !Ref PostDeployLambda
      RetentionInDays: 7

Outputs:
  BaseStackName:
    Description: 'Base stack name'
    Value: !Ref AWS::StackName
  SourceStore:
    Description: Regional Source Store Bucket
    Value: !Ref SourceStore
  # export datastore bucket
  DataStore:
    Description: Amazon S3 bucket for keeping the data and logs
    Value: !Ref DataStore
    Export:
      Name:  !Sub ${AWS::StackName}-DataStore
  #export log groups
  ELBLogGroup:
    Description: AWS ELB log group name
    Value: !Ref ELBLogGroup
    Export:
      Name:  !Sub ${AWS::StackName}-ELBLogGroup
  ePOLogGroup:
    Description: ePO log group name
    Value: !Ref ePOLogGroup
    Export:
      Name:  !Sub ${AWS::StackName}-ePOLogGroup
  AHLogGroup:
    Description: AH log group name
    Value: !Ref AHLogGroup
    Export:
      Name:  !Sub ${AWS::StackName}-AHLogGroup
  DXLLogGroup:
    Description: DXL log group name
    Value: !Ref DXLLogGroup
    Export:
      Name:  !Sub '${AWS::StackName}-DXLLogGroup'
  # export lambdas
  PreDeployLambdaARN:
    Description: Pre deployment action lambda ARN
    Value: !GetAtt [PreDeployLambda, Arn]
    Export:
      Name:  !Sub ${AWS::StackName}-PreDeployLambda
  PostDeployLambdaARN:
    Description: Post deployment action lambda ARN
    Value: !GetAtt [PostDeployLambda, Arn]
    Export:
      Name:  !Sub ${AWS::StackName}-PostDeployLambda
  DeleteResourcesAssociatedWithLambdaArn:
    Description: Delete resources associated with  lambda ARN
    Value: !GetAtt [DeleteResourcesAssociatedWithLambda, Arn]
    Export:
      Name:  !Sub ${AWS::StackName}-DeleteResourcesAssociatedWithLambda
  PostDeployLambdaRole:
    Description: Post deployment action lambda role name
    Value: !Ref PostDeployLambdaRole
    Export:
      Name:  !Sub ${AWS::StackName}-PostDeployLambdaRole
  # network exports
  SolutionDBInstanceIdentifier:
    Description: Unique DB instance identifier based on parameters
    Value:
     Fn::If:
        - cCreateVPCPeering
        - !Ref DBInstanceIdentifier
        - !Sub ${ParentStack}-rds
  VPCID:
    Description: VPC ID
    Value: !Ref VPCID
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
  VPCCIDR:
    Description: VPC CIDR
    Value: !GetAtt [ GetVpcDetailsCustom, VPCCIDR ]
    Export:
      Name: !Sub ${AWS::StackName}-VPCCIDR
  PublicSubnet1ID:
    Condition: cPublicNetwork
    Description: VPC Public subnet-1 ID
    Value: !Ref PublicSubnet1ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1ID
  PublicSubnet1CIDR:
    Condition: cPublicNetwork
    Description: VPC Public Subnet-1 CIDR
    Value: !GetAtt [ GetVpcDetailsCustom, PublicSubnet1CIDR ]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1CIDR
  PublicSubnet2ID:
    Condition: cPublicNetwork
    Description: VPC Public subnet-2 ID
    Value: !Ref PublicSubnet2ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2ID
  PublicSubnet2CIDR:
    Condition: cPublicNetwork
    Description: VPC Public Subnet-2 CIDR
    Value: !GetAtt [ GetVpcDetailsCustom, PublicSubnet2CIDR ]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2CIDR'
  PrivateSubnet1ID:
    Description: VPC Private subnet-1 ID
    Value: !Ref PrivateSubnet1ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ID
  PrivateSubnet1CIDR:
    Description: VPC Private Subnet-1 CIDR
    Value: !GetAtt [ GetVpcDetailsCustom, PrivateSubnet1CIDR ]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1CIDR
  PrivateSubnet2ID:
    Description: VPC Private subnet-2 ID
    Value: !Ref PrivateSubnet2ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2ID
  PrivateSubnet2CIDR:
    Description: VPC Private Subnet-2 CIDR
    Value: !GetAtt [ GetVpcDetailsCustom, PrivateSubnet2CIDR ]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2CIDR
  RDPAdminSecurityGroup:
    Condition: cPublicNetwork
    Description: Security group for device management for private network.
    Value: !Ref RDPAdminSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-RDPAdminSecurityGroup
  R53PublicHostedZone:
    Condition: cCreateR53Resources
    Description: Amazon Route53 Public HostedZone ID
    Value: !Ref R53PublicHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-R53PublicHostedZone
